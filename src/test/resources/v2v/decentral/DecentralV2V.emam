//dezentralisierte C2C Modellierung mit MontiCAR
package v2v.decentral;
import v2v.decentral.subcomponents.Direction;
import v2v.decentral.subcomponents.Collision;

component DecentralV2V {

	ports
		in N ownID,
		in Q ownPosX,
		in Q ownPosY,
		in Q ownPosZ,
		in Z ownMode,
		in N1 ownBatteryLevel,
		in Q(0.10000000149 m : 30.0 m)^{1081} ownHokuyoFront,
		in Q(0.10000000149 m : 30.0 m)^{1081} ownHokuyoRight,
		in Q(0.10000000149 m : 30.0 m)^{1081} ownHokuyoLeft,		

		in N carID,
		in Q carPosX,
		in Q carPosY,
		in Q carPosZ,
		in Z carMode,

		out N selfID,
		out Q selfPosX,
		out Q selfPosY,
		out Q selfPosZ,
		out Z selfMode,

		out Q posXOfCar,
		out Q posYOfCar;

	instance Direction ownDirection;
	instance Direction carDirection;
	instance Collision collision;

	connect ownID -> selfID;
	connect ownPosX -> selfPosX;
	connect ownPosY -> selfPosY;
	connect ownPosZ -> selfPosZ;
	connect ownMode -> selfMode;

	connect ownPosX -> ownDirection.posX;
	connect ownPosY -> ownDirection.posY;

	connect posXOfCar -> carDirection.posX;
	connect posYOfCar -> carDirection.posY;

	connect ownHokuyoRight[843] -> collision.car1SensorRight[0];
	connect ownHokuyoRight[540] -> collision.car1SensorRight[1];
	connect ownHokuyoRight[246] -> collision.car1SensorRight[2];

	connect ownHokuyoLeft[246] -> collision.car1SensorLeft[0];
	connect ownHokuyoLeft[540] -> collision.car1SensorLeft[1];
	connect ownHokuyoLeft[843] -> collision.car1SensorLeft[2];

	connect ownDirection.position[:] -> collision.ownPosition[:];
	connect ownDirection.direction[:] -> collision.ownDirection[:];
	connect ownDirection.velocity -> collision.ownVelocity;

	connect carDirection.position[:] -> collision.car1Position[:];
	connect carDirection.direction[:] -> collision.car1Direction[:];
	connect carDirection.velocity -> collision.car1Velocity;
	}
}